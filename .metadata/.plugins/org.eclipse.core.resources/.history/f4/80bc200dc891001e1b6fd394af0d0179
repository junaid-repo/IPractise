package com.javatechie.executor.api.service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.javatechie.executor.api.entity.User;
import com.javatechie.executor.api.external.CommFacade;
import com.javatechie.executor.api.repository.UserRepository;
import com.javatechie.executor.vo.ClassDTO;

@Service
public class UserService {

	@Autowired
	private UserRepository repository;
	
	@Autowired
	CommFacade comm;

	Object target;
	Logger logger = LoggerFactory.getLogger(UserService.class);

	@Async
	public CompletableFuture<List<User>> saveUsers(MultipartFile file) throws Exception {
		long start = System.currentTimeMillis();
		List<User> users = parseCSVFile(file);
		logger.info("saving list of users of size {}", users.size(), "" + Thread.currentThread().getName());
		users = repository.saveAll(users);
		long end = System.currentTimeMillis();
		logger.info("Total time {}", (end - start));
		return CompletableFuture.completedFuture(users);
	}

	@Async
	public CompletableFuture<List<User>> findAllUsers() {
		logger.info("get list of user by " + Thread.currentThread().getName());
		List<User> users = repository.findAll();
		return CompletableFuture.completedFuture(users);
	}

	private List<User> parseCSVFile(final MultipartFile file) throws Exception {
		final List<User> users = new ArrayList<>();
		try {
			try (final BufferedReader br = new BufferedReader(new InputStreamReader(file.getInputStream()))) {
				String line;
				while ((line = br.readLine()) != null) {
					final String[] data = line.split(",");
					final User user = new User();
					user.setName(data[0]);
					user.setEmail(data[1]);
					user.setGender(data[2]);
					users.add(user);
				}
				return users;
			}
		} catch (final IOException e) {
			logger.error("Failed to parse CSV file {}", e);
			throw new Exception("Failed to parse CSV file {}", e);
		}
	}

	@Async
	public CompletableFuture<String> saveListOfUsers(List<User> usersList) {

		long st = System.currentTimeMillis();
		usersList.stream().parallel().forEach(obj -> {
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			repository.save(obj);
		});

		for (int i = 0; i < 10; i++) {
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			System.out.println("The value of i in async --> " + i);
		}
		long et = System.currentTimeMillis();
		System.out.println("time taken in async is  --> " + (et - st));

		return CompletableFuture.completedFuture("completed");
	}

	@Async
	public CompletableFuture<String> saveTeachersDetails(List<ClassDTO> req) {
		
		req.stream().forEach(obj->{
			
			String extRes=comm.callCreateTeacher(obj);
			
		});

		return CompletableFuture.completedFuture("completed");
	}
}
